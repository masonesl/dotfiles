#!/bin/env /bin/sh

VOLUME_INCREMENT=0.02

_update_eww () {
	# Update eww with new volume and show volume osd

	eww ping > /dev/null 2>&1 && eww update volume-system=$1 &

	# Close any open osd overlays and start volume osd
	eww close $(eww windows | grep -oP "\*\K(.*-osd)" | grep -v volume-osd)

  case "$(eval $XDG_DATA_HOME/scripts/workspace get-monitor)" in
    0) eww open primary-volume-osd
    ;;
    1) eww open secondary-volume-osd
    ;;
  esac
  
	echo 3 > /tmp/osd.timeout
}

_check_mute () {
	# Check mute status and exit with code 0 if not muted

	STATUS=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | \
		awk '{print $3}')

	[ "$STATUS" != "[MUTED]" ]
}

_toggle_mute () {
	# Change mute status

	VOL=0
	_check_mute || VOL=$(_get_volume)

	wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle

	_update_eww $VOL
}

_get_volume () {
	# Return volume

  wpctl get-volume @DEFAULT_AUDIO_SINK@ | \
    awk '{print $2 * 100}'
}

_set_volume () {
	# Set volume

	# If muted, unmute
	_check_mute || _toggle_mute

  wpctl set-volume @DEFAULT_AUDIO_SINK@ $(echo $1 | awk '{print $1 / 100}') --limit 1

	_update_eww $1
}

_adjust_volume () {
	# Adjust volume by set increment
	
	# If muted, unmute
	_check_mute || _toggle_mute

	if [ $1 = "down" ]
	then
    wpctl set-volume @DEFAULT_AUDIO_SINK@ $VOLUME_INCREMENT- --limit 1
	elif [ $1 = "up" ]
	then
    wpctl set-volume @DEFAULT_AUDIO_SINK@ $VOLUME_INCREMENT+ --limit 1
	fi
  _update_eww $(_get_volume)
}

case "$1" in
  get) _get_volume
  ;;
  set) _set_volume $2
  ;;
  adjust) _adjust_volume $2
  ;;
  toggle-mute) _toggle_mute
  ;;
  update-eww) _update_eww $(_get_volume)
  ;;
esac
